#===============================================================================
# Continuous integration workflow
#-------------------------------------------------------------------------------
# Performs continuous building on each commit or pull-requests on master
#===============================================================================

name: Continuous Integration

on:
  push:
    branches:
      - 'master'
      - 'develop'
      - 'feature*/**'
  pull_request:
    branches:
      - '**'

env:
  Configuration: Release
  ContinuousIntegrationBuild: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_SYSTEM_CONSOLE_ALLOW_ANSI_COLOR_REDIRECTION: true

permissions:
  checks: write # Required for writing test reports

jobs:
  build:
    name: 🛠️ Build and test
    runs-on: ubuntu-latest

    steps:
      - name: 👨‍💻 Check-out code
        uses: actions/checkout@v4

      - name: 👨‍🔧 Setup .NET Core SDK
        uses: actions/setup-dotnet@v4
        with:
          global-json-file: global.json
          dotnet-version: | # Net 9 is installed through global.json file (see global.json file why)
            8.x

      - name: ℹ️ Show dotnet details
        run: dotnet --info

      - name: 💾 Enable package caching
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          # Look to see if there is a cache hit for the corresponding requirements file
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nuget-          

      - name: 📥 Restore packages
        run: dotnet restore

      - name: 🏗️ Build code
        run: dotnet build --no-restore

      - name: 😨 Test code
        run: dotnet test --no-build -m:1 # Run only one target-framework at a time to avoid screwing up the summary
        continue-on-error: true

      - name: 📦 Create NuGet package
        run: dotnet pack --no-build --output .