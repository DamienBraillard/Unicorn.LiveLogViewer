<Project>

  <!--
  A custom inline task that can write one or more lines to the github summary files identified by the "GITHUB_STEP_SUMMARY" environment variable.

  Lines = The text line or lines to write
  -->
  <UsingTask
      TaskName="WriteToGitHubSummary"
      TaskFactory="RoslynCodeTaskFactory"
      AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <Text ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          var outputFilePath = Environment.GetEnvironmentVariable("GITHUB_STEP_SUMMARY");
          if (String.IsNullOrEmpty(outputFilePath))
          {
              Log.LogError("The GITHUB_STEP_SUMMARY environment variable is not defined. Please define the GITHUB_STEP_SUMMARY to contain the path of the markdown file where the build summary should be written");
              return false;
          }

          using (var writer = new StreamWriter(outputFilePath, true) { NewLine = "\n" })
          {
              writer.WriteLine(); // Safety empty line
              foreach(var textItem in Text)
              {
                  writer.WriteLine(textItem.ItemSpec);
              }
              writer.WriteLine(); // Safety empty line
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>

  <!--
 A custom inline task that can reformat the ReportGenerator "MarkdownSummary" report so that is fits well
 in the GitHub action Summary

 Title = The title to display before the summary content
 InputFile = The file produced by ReportGenerator
 -->
  <UsingTask
      TaskName="SendCoverageToGitHubSummary"
      TaskFactory="RoslynCodeTaskFactory"
      AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <Title Required="true"/>
      <InputFile ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System.IO" />
      <Using Namespace="System.Text.RegularExpressions" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          var outputFilePath = Environment.GetEnvironmentVariable("GITHUB_STEP_SUMMARY");
          if (String.IsNullOrEmpty(outputFilePath))
          {
              Log.LogError("The GITHUB_STEP_SUMMARY environment variable is not defined. Please define the GITHUB_STEP_SUMMARY to contain the path of the markdown file where the build summary should be written");
              return false;
          }

          foreach(var inputFileItem in InputFile)
          {
              var content = File.ReadAllLines(inputFileItem.GetMetadata("FullPath"));
              var coverageMatch = Regex.Match(string.Join("\n", content), @"Line coverage.*?([0-9\.]+%)");
              var coverage = coverageMatch.Success ? coverageMatch.Groups[1].Value : "?%";

              using (var writer = new StreamWriter(outputFilePath, true) { NewLine = "\n" })
              {
                  writer.WriteLine();
                  writer.WriteLine($"<details><summary><b>ðŸ”µ {Title}</b>: {coverage}</summary>");
                  writer.WriteLine(); // An empty line is required before the first table or it won't display correctly
                  foreach(var line in content.Where(l => !l.StartsWith("#")))
                  {
                      writer.WriteLine(line);
                  }
                  writer.WriteLine(); // Add an empty line as safety
                  writer.WriteLine("</details>");
              }
          }
        ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>